=================================================================================
                   LSE RECRUITEMENT 2016 - MY MEMCHECK
=================================================================================
Level1 - Strace:
       src/level1
       Use of ptrace to track system calls from a traced program
       Prints arguments for execve, fork, vfork, clone, exit,
       exit_group, brk, mmap, munmap, mremap, mprotect
       Catches return code with edi (exit*)
       prints PID and where the error was raised
       Prints other functions names, but no arguments

Level2 - Hooked Strace:
       src/level2
       #include Level1
       - PTRACE_SYSCALL
       + HOOK ON SYSCALLS
       1 line against 700 less effective but hey, WE rule the stuff now

Level3 - Memory tracer:
       src/level3
       #include Level{1,2}
       Hooks on frequently used function that play with memory
       malloc, realloc, free, calloc
       Save each allocated area, to check if we are not out of bound
       Pretty neat

Level4 - Memory checker:
       src/level4
       #include Level{1...3}
       Remove memory access
       Handle segfaults from that
       display memory leaks and invalid accesses


I may retry this project when I have time so that I can do it proprely,
with good functions factorisations, cleaner code, and more special
cases handling.
Also, I don't like having some code that I don't totally handle myself
and that is not maintainable.

Details:
XIP, XAX, and other variables like this were an attempt at preparing for a
*possible* multi-arch compliant program. They translate to rip or eip (in the case
of XIP for example) regarding the machine.

See TODO